load("//third_party:com_github_robotlocomotion_drake/tools/workspace/cpplint.bzl", "cpplint")
load("//third_party:com_github_robotlocomotion_drake/tools/workspace/python_lint.bzl", "python_lint")
load(
    "//tools:dreal.bzl",
    "dreal_cc_googletest",
    "dreal_cc_library",
    "dreal_generate_file",
    "dreal_pybind_library",
)
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

package(default_visibility = ["//visibility:public"])

# ---------
# Libraries
# ---------
dreal_cc_library(
    name = "assert",
    hdrs = [
        "assert.h",
    ],
)

dreal_cc_library(
    name = "box",
    srcs = [
        "box.cc",
    ],
    hdrs = [
        "box.h",
    ],
    deps = [
        ":assert",
        ":exception",
        ":logging",
        ":math",
        "//dreal/symbolic",
        "@ibex",
    ],
)

dreal_cc_library(
    name = "expression_decomposer",
    srcs = [
        "expression_decomposer.cc",
    ],
    hdrs = [
        "expression_decomposer.h",
    ],
    deps = [
        ":assert",
        ":exception",
        ":logging",
        ":scoped_unordered_map",
        ":scoped_vector",
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "interval",
    srcs = [
        "interval.cc",
    ],
    hdrs = [
        "interval.h",
    ],
    deps = [
        ":box",
    ],
)

dreal_cc_library(
    name = "if_then_else_eliminator",
    srcs = [
        "if_then_else_eliminator.cc",
    ],
    hdrs = [
        "if_then_else_eliminator.h",
    ],
    deps = [
        ":nnfizer",
        "//dreal/symbolic",
        "//dreal/util:logging",
    ],
)

dreal_cc_library(
    name = "stat",
    hdrs = [
        "stat.h",
    ],
)

dreal_cc_library(
    name = "tseitin_cnfizer",
    srcs = [
        "tseitin_cnfizer.cc",
    ],
    hdrs = [
        "tseitin_cnfizer.h",
    ],
    deps = [
        ":assert",
        ":exception",
        ":logging",
        ":naive_cnfizer",
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "naive_cnfizer",
    srcs = [
        "naive_cnfizer.cc",
    ],
    hdrs = [
        "naive_cnfizer.h",
    ],
    deps = [
        ":assert",
        ":exception",
        ":nnfizer",
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "exception",
    hdrs = [
        "exception.h",
    ],
    deps = [
        "@fmt",
    ],
)

dreal_cc_library(
    name = "filesystem",
    srcs = [
        "filesystem.cc",
    ],
    hdrs = [
        "filesystem.h",
    ],
)

dreal_cc_library(
    name = "ibex_converter",
    srcs = [
        "ibex_converter.cc",
    ],
    hdrs = [
        "ibex_converter.h",
    ],
    deps = [
        ":box",
        ":exception",
        ":interval",
        ":logging",
        ":math",
        "//dreal/symbolic",
        "@ibex",
    ],
)

dreal_cc_library(
    name = "logging",
    srcs = [
        "logging.cc",
    ],
    hdrs = [
        "logging.h",
    ],
    deps = [
        "@spdlog",
    ],
)

dreal_cc_library(
    name = "math",
    srcs = [
        "math.cc",
    ],
    hdrs = [
        "math.h",
    ],
)

dreal_cc_library(
    name = "nnfizer",
    srcs = [
        "nnfizer.cc",
    ],
    hdrs = [
        "nnfizer.h",
    ],
    deps = [
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "option_value",
    hdrs = [
        "option_value.h",
    ],
    deps = [
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "predicate_abstractor",
    srcs = [
        "predicate_abstractor.cc",
    ],
    hdrs = [
        "predicate_abstractor.h",
    ],
    deps = [
        "//dreal/symbolic",
    ],
)

dreal_cc_library(
    name = "profiler",
    srcs = [
        "profiler.cc",
    ],
    hdrs = [
        "profiler.h",
    ],
)

dreal_cc_library(
    name = "scoped_unordered_map",
    hdrs = [
        "scoped_unordered_map.h",
    ],
    deps = [
        ":assert",
        ":exception",
    ],
)

dreal_cc_library(
    name = "scoped_vector",
    hdrs = [
        "scoped_vector.h",
    ],
    deps = [
        ":assert",
        ":exception",
    ],
)

dreal_cc_library(
    name = "string_to_interval",
    srcs = [
        "string_to_interval.cc",
    ],
    hdrs = [
        "string_to_interval.h",
    ],
    deps = [
        "//dreal/util:box",
    ],
)

# -----
# Tests
# -----
dreal_cc_googletest(
    name = "box_test",
    tags = ["unit"],
    deps = [
        ":box",
    ],
)

dreal_cc_googletest(
    name = "filesystem_test",
    tags = ["unit"],
    deps = [
        ":filesystem",
    ],
)

dreal_cc_googletest(
    name = "interval_test",
    tags = ["unit"],
    deps = [
        ":interval",
    ],
)

dreal_cc_googletest(
    name = "if_then_else_eliminator_test",
    tags = ["unit"],
    deps = [
        ":if_then_else_eliminator",
        "//dreal/api",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

dreal_cc_googletest(
    name = "logging_test",
    tags = ["unit"],
    deps = [
        ":logging",
    ],
)

dreal_cc_googletest(
    name = "nnfizer_test",
    tags = ["unit"],
    deps = [
        ":nnfizer",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

dreal_cc_googletest(
    name = "option_value_test",
    tags = ["unit"],
    deps = [
        ":option_value",
    ],
)

dreal_cc_googletest(
    name = "predicate_abstractor_test",
    tags = ["unit"],
    deps = [
        ":predicate_abstractor",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

dreal_cc_googletest(
    name = "scoped_unordered_map_test",
    tags = ["unit"],
    deps = [
        ":scoped_unordered_map",
    ],
)

dreal_cc_googletest(
    name = "scoped_vector_test",
    tags = ["unit"],
    deps = [
        ":scoped_vector",
    ],
)

dreal_cc_googletest(
    name = "string_to_interval_test",
    tags = ["unit"],
    deps = [
        ":string_to_interval",
    ],
)

dreal_cc_googletest(
    name = "tseitin_cnfizer_test",
    tags = ["unit"],
    deps = [
        ":tseitin_cnfizer",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

# ----------------------
# Bindings
# ----------------------
dreal_generate_file(
    name = "init_py",
    out = "__init__.py",
    content = "from dreal.util._dreal_util_py import *",
    visibility = ["//visibility:private"],
)

dreal_pybind_library(
    name = "dreal_util_py",
    cc_srcs = ["util_py.cc"],
    py_deps = [
        "//dreal/symbolic:dreal_symbolic_py",
    ],
    py_srcs = [":init_py"],
)

py_test(
    name = "util_test_py",
    srcs = [
        "test/util_test.py",
    ],
    main = "test/util_test.py",
    tags = [
        "no_asan",
        "no_lsan",
        "no_tsan",
        "no_ubsan",
    ],
    deps = [
        ":dreal_util_py",
    ],
)

pkg_tar(
    name = "package_python",
    srcs = [
        ":_dreal_util_py.so",
        ":dreal_util_py",
    ],
    extension = "tar.gz",
    package_dir = "lib/python2.7/site-packages/dreal/util",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

# ----------------------
# Header files to expose
# ----------------------
filegroup(
    name = "headers",
    srcs = [
        "box.h",
        "option_value.h",
    ],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "package_headers",
    srcs = [
        ":headers",
    ],
    extension = "tar.gz",
    package_dir = "include/dreal/util",
    tags = ["manual"],
)

cpplint()

python_lint()
